{"version":3,"file":"vplterminal.min.js","sources":["../src/vplterminal.js"],"sourcesContent":["// This file is part of VPL for Moodle - http://vpl.dis.ulpgc.es/\n//\n// VPL for Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// VPL for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with VPL for Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Terminal control\n *\n * @copyright 2014 Juan Carlos Rodríguez-del-Pino\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author Juan Carlos Rodríguez-del-Pino <jcrodriguez@dis.ulpgc.es>\n */\n\n/* globals Terminal */\n\ndefine(\n    [\n        'jquery',\n        'jqueryui',\n        'mod_vpl/vplutil',\n        'mod_vpl/vplui',\n        'mod_vpl/vplclipboard'\n    ],\n    function($, jqui, VPLUtil, VPLUI, VPLClipboard) {\n        if (typeof VPLTerminal !== 'undefined') {\n            return VPLTerminal;\n        }\n        var NTHEMES = 5;\n        var VPLTerminal = function(dialogId, terminalId, str) {\n            var self = this;\n            var ws = null;\n            var onCloseAction = VPLUtil.doNothing;\n            var title = '';\n            var message = '';\n            var tdialog = $('#' + dialogId);\n            var tIde = $('#vplide');\n            var titleText = '';\n            var clipboard = null;\n            var cliboardMaxsize = 64000;\n            var clipboardData = '';\n\n            var terminal;\n            var terminalTag = $('#' + terminalId);\n            this.updateTitle = function() {\n                var text = title;\n                if (message !== '') {\n                    text += ' (' + message + ')';\n                }\n                titleText.text(str('console') + \": \" + text);\n            };\n            this.setTitle = function(t) {\n                title = t;\n                this.updateTitle();\n            };\n            this.setMessage = function(t) {\n                message = t;\n                this.updateTitle();\n            };\n            /**\n             * Manages the data received from clipboard\n             * @param {string} data Data recieved\n             */\n            function receiveClipboard(data) {\n                clipboardData += data;\n                if (clipboardData.length > cliboardMaxsize) {\n                    var from = clipboardData.length - cliboardMaxsize / 2;\n                    clipboardData = clipboardData.substr(from);\n                }\n            }\n            /**\n             * Sends the clipboard data to the connection\n             */\n            function pasteClipboard() {\n                if (ws && ws.readyState == ws.OPEN) {\n                    ws.send(clipboard.getEntry2());\n                }\n            }\n            /**\n             * Updates the data in the clipboard dialog\n             */\n            function updateClipboard() {\n                clipboard.setEntry1(clipboardData);\n            }\n            /**\n             * Opens the clipboard dialog\n             */\n            function openClipboard() {\n                updateClipboard();\n                clipboard.show();\n            }\n            this.write = function(text) {\n                terminal.write(text);\n                return text;\n            };\n\n            this.connect = function(server, onClose) {\n                onCloseAction = onClose;\n                if (\"WebSocket\" in window) {\n                    terminal.reset();\n                    terminal.startBlink();\n                    self.show();\n                    if (ws) {\n                        ws.close();\n                    }\n                    clipboardData = '';\n                    self.setMessage('');\n                    self.setTitle(str('connecting'));\n                    ws = new WebSocket(server);\n                    ws.writeBuffer = '';\n                    ws.writeIt = function() {\n                        terminal.write(ws.writeBuffer);\n                        receiveClipboard(ws.writeBuffer);\n                        ws.writeBuffer = '';\n                    };\n                    ws.onmessage = function(event) {\n                        if (ws.writeBuffer.length > 0) {\n                            ws.writeBuffer += event.data;\n                        } else {\n                            ws.writeBuffer = event.data;\n                            setTimeout(ws.writeIt, 35);\n                        }\n                    };\n                    ws.onopen = function() {\n                        self.setMessage('');\n                        self.setTitle(str('connected'));\n                    };\n                    ws.onclose = function() {\n                        self.setTitle(str('connection_closed'));\n                        terminal.blur();\n                        terminal.stopBlink();\n                        onClose();\n                        ws.stopOutput = true;\n                    };\n                } else {\n                    terminal.write('WebSocket not available: Upgrade your browser');\n                }\n            };\n            this.writeLocal = function(text) {\n                ws.onmessage({\n                    data: text\n                });\n                return text;\n            };\n            this.setDataCallback = function(call) {\n                ws.onData = call;\n            };\n            this.closeLocal = function() {\n                if (ws) {\n                    ws.writeIt();\n                    ws.close();\n                    terminal.stopBlink();\n                    self.setTitle(str('connection_closed'));\n                }\n            };\n            this.connectLocal = function(onClose, onData) {\n                onCloseAction = onClose;\n                terminal.reset();\n                terminal.startBlink();\n                self.show();\n                if (ws) {\n                    ws.close();\n                }\n                clipboardData = '';\n                self.setMessage('');\n                self.setTitle(str('running'));\n                ws = {};\n                ws.onData = onData;\n                ws.writeBuffer = '';\n                ws.readBuffer = '';\n                ws.readyState = 1;\n                ws.OPEN = 1;\n                ws.close = function() {\n                    ws = false;\n                };\n                ws.onmessage = function(event) {\n                    ws.writeBuffer = event.data;\n                    ws.writeIt();\n                };\n                ws.writeIt = function() {\n                    if (ws) {\n                        terminal.write(ws.writeBuffer);\n                        receiveClipboard(ws.writeBuffer);\n                        ws.writeBuffer = '';\n                    }\n                };\n                ws.send = function(text) {\n                    // Process backspace.\n                    if (text == '\\u007f') {\n                        if (ws.readBuffer.length > 0) {\n                            self.writeLocal('\\b \\b');\n                            ws.readBuffer = ws.readBuffer.substr(0, ws.readBuffer.length - 1);\n                        }\n                    } else {\n                        self.writeLocal(text);\n                        ws.readBuffer += text;\n                    }\n                    var pos = ws.readBuffer.indexOf(\"\\r\");\n                    if (pos != -1) {\n                        var data = ws.readBuffer.substr(0, pos);\n                        ws.readBuffer = ws.readBuffer.substr(pos + 1);\n                        ws.onData(data);\n                    }\n                };\n            };\n            this.isOpen = function() {\n                return tdialog.dialog(\"isOpen\");\n            };\n            this.close = function() {\n                tdialog.dialog(\"close\");\n            };\n            this.isConnected = function() {\n                return ws && ws.readyState != ws.CLOSED;\n            };\n            this.disconnect = function() {\n                if (ws && ws.readyState == ws.OPEN) {\n                    onCloseAction();\n                    if (ws) {\n                        ws.close();\n                    }\n                    terminal.stopBlink();\n                }\n            };\n            var HTMLUpdateClipboard = VPLUI.genIcon('copy', 'sw') + ' ' + str('copy');\n            var HTMLPaste = VPLUI.genIcon('paste', 'sw') + ' ' + str('paste');\n            clipboard = new VPLClipboard('vpl_dialog_terminal_clipboard', HTMLUpdateClipboard, function() {\n                    updateClipboard();\n                    document.execCommand('copy');\n                }, HTMLPaste, pasteClipboard);\n            this.closeDialog = function() {\n                clipboard.hide();\n                self.disconnect();\n            };\n            /**\n             * Sets the terminal theme\n             * @param {int} theme\n             */\n            function setTheme(theme) {\n                var cbase = \"vpl_terminal_theme\";\n                var nthemes = 5;\n                tdialog.data('terminal_theme', theme);\n                VPLUtil.setUserPreferences({terminalTheme: theme});\n                for (var i = 0; i < nthemes; i++) {\n                    tdialog.removeClass(cbase + i);\n                }\n                tdialog.addClass(cbase + theme);\n            }\n            /**\n             * Limits the size of the dialogo to the IDE\n             */\n            function controlDialogSize() {\n                // Resize if dialog is large than screen.\n                var bw = tIde.width();\n                var bh = tIde.height();\n                if (tdialog.width() > bw) {\n                    tdialog.dialog(\"option\", \"width\", bw);\n                }\n                if (tdialog.parent().height() > bh) {\n                    tdialog.dialog(\"option\", \"height\", bh - tdialog.prev().outerHeight());\n                }\n            }\n            tdialog.dialog({\n                closeOnEscape: false,\n                autoOpen: false,\n                width: 'auto',\n                height: 'auto',\n                resizable: true,\n                dragStop: controlDialogSize,\n                open: controlDialogSize,\n                focus: function() {\n                    controlDialogSize();\n                    terminal.focus();\n                },\n                dialogClass: 'vpl_ide vpl_vnc',\n                create: function() {\n                    titleText = VPLUI.setTitleBar(tdialog, 'console', 'console',\n                            ['clipboard', 'keyboard', 'theme'],\n                            [openClipboard,\n                            function() {\n                                terminal.focus();\n                            },\n                            function() {\n                                // Cycle themes from 0 to NTHEMES-1.\n                                var theme = (tdialog.data('terminal_theme') + 1) % NTHEMES;\n                                setTheme(theme);\n                            }]);\n                },\n                close: function() {\n                    self.closeDialog();\n                },\n                resizeStop: function() {\n                    tdialog.width(tdialog.parent().width());\n                    tdialog.height(tdialog.parent().height() - tdialog.prev().outerHeight());\n                    controlDialogSize();\n                    terminal.focus();\n                }\n            });\n            this.setFontSize = function(size) {\n                terminalTag.css(\"font-size\", size + \"px\");\n            };\n            VPLUtil.getUserPreferences(function(data) {\n                setTheme(data.preferences.terminalTheme);\n            });\n            tdialog.css(\"padding\", \"1px\");\n            tdialog.parent().css('z-index', 2000);\n            this.show = function() {\n                tdialog.dialog('open');\n                terminal.focus();\n            };\n            this.init = function() {\n                if (typeof Terminal === 'undefined') {\n                    VPLUtil.loadScript(['/xterm/term.js'], function() {\n                            self.init();\n                        });\n                    return;\n                }\n                terminal = new Terminal({\n                    cols: 80,\n                    rows: 24,\n                    useStyle: true,\n                    screenKeys: true\n                });\n                terminal.on('data', function(data) {\n                    if (ws && ws.readyState == ws.OPEN) {\n                        ws.send(data);\n                    }\n                });\n                terminal.open(terminalTag[0]);\n                terminal.reset();\n                terminal.stopBlink();\n                terminal.setLineCallback(\n                    function(line, nlines) {\n                        var height = terminalTag.height();\n                        var offset = tdialog.scrollTop();\n                        var viewHeight = tdialog.innerHeight();\n                        if (viewHeight >= height) {\n                            return;\n                        }\n                        var lineHeight = height / nlines;\n                        var pos = line * lineHeight;\n                        // If cursor in view area return.\n                        if (pos >= offset && pos < (viewHeight + offset - lineHeight)) {\n                            return;\n                        }\n                        if (pos < offset) { // If cursor beforer view area scroll to first view line.\n                            tdialog.scrollTop(pos);\n                        } else {\n                            tdialog.scrollTop((pos - viewHeight) + 2 * lineHeight);\n                        }\n                    }\n                );\n            };\n            this.init();\n        };\n        window.VPLTerminal = VPLTerminal;\n        return VPLTerminal;\n    }\n);\n"],"names":["define","$","jqui","VPLUtil","VPLUI","VPLClipboard","VPLTerminal","dialogId","terminalId","str","terminal","self","this","ws","onCloseAction","doNothing","title","message","tdialog","tIde","titleText","clipboard","clipboardData","terminalTag","receiveClipboard","data","length","from","cliboardMaxsize","substr","updateClipboard","setEntry1","openClipboard","show","updateTitle","text","setTitle","t","setMessage","write","connect","server","onClose","window","reset","startBlink","close","WebSocket","writeBuffer","writeIt","onmessage","event","setTimeout","onopen","onclose","blur","stopBlink","stopOutput","writeLocal","setDataCallback","call","onData","closeLocal","connectLocal","readBuffer","readyState","OPEN","send","pos","indexOf","isOpen","dialog","isConnected","CLOSED","disconnect","HTMLUpdateClipboard","genIcon","HTMLPaste","setTheme","theme","cbase","setUserPreferences","terminalTheme","i","removeClass","addClass","controlDialogSize","bw","width","bh","height","parent","prev","outerHeight","document","execCommand","getEntry2","closeDialog","hide","closeOnEscape","autoOpen","resizable","dragStop","open","focus","dialogClass","create","setTitleBar","resizeStop","setFontSize","size","css","getUserPreferences","preferences","init","Terminal","cols","rows","useStyle","screenKeys","on","setLineCallback","line","nlines","offset","scrollTop","viewHeight","innerHeight","lineHeight","loadScript"],"mappings":"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"}