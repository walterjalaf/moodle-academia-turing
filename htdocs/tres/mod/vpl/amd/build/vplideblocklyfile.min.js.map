{"version":3,"file":"vplideblocklyfile.min.js","sources":["../src/vplideblocklyfile.js"],"sourcesContent":["// This file is part of VPL for Moodle - http://vpl.dis.ulpgc.es/\n//\n// VPL for Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// VPL for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with VPL for Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Blockly file management\n *\n * @copyright 2013 Juan Carlos Rodríguez-del-Pino\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author Juan Carlos Rodríguez-del-Pino <jcrodriguez@dis.ulpgc.es>\n */\n\n/* globals Interpreter */\n/* globals Blockly */\n\ndefine(\n    [\n        'jquery',\n        'mod_vpl/vplutil'\n    ],\n    function($, VPLUtil) {\n        return function() {\n            var self = this;\n            var vplIdeInstance = this.getVPLIDE();\n            this.firstContent = true;\n            this.workspaceInstance = false;\n            var adaptBlockly = function() {\n                if (typeof Blockly.PHP.workspaceToCodeOld == 'undefined') {\n                    Blockly.PHP.workspaceToCodeOld = Blockly.PHP.workspaceToCode;\n                    Blockly.PHP.workspaceToCode = function(workspace) {\n                        return \"<?php\\n\" + Blockly.PHP.workspaceToCodeOld(workspace);\n                    };\n                }\n                if (typeof Blockly.Python.workspaceToCodeOld == 'undefined') {\n                    Blockly.Python.workspaceToCodeOld = Blockly.Python.workspaceToCode;\n                    Blockly.Python.workspaceToCode = function(workspace) {\n                        return \"# -*- coding: utf-8 -*-\\n\" + Blockly.Python.workspaceToCodeOld(workspace);\n                    };\n                }\n            };\n            var oldAdjustSize = this.adjustSize;\n            this.adjustSize = function() {\n                if (oldAdjustSize.call(this)) {\n                    var editTag = $(this.getTId());\n                    if (editTag.length === 0) {\n                        return false;\n                    }\n                    var tabs = editTag.parent();\n                    var newHeight = tabs.height();\n                    newHeight -= editTag.position().top;\n                    editTag.height(newHeight);\n                    $('#' + this.bdiv).height(newHeight);\n                    $('#' + this.bdiv).width(editTag.width());\n                    Blockly.svgResize(this.workspaceInstance);\n                    return false;\n                }\n                return false;\n            };\n            this.undo = function() {\n                if (this.isOpen()) {\n                    this.workspaceInstance.undo(false);\n                }\n            };\n            this.redo = function() {\n                if (this.isOpen()) {\n                    this.workspaceInstance.undo(true);\n                }\n            };\n            this.interpreter = false;\n            this.animateRun = false;\n            this.RUNSTATE = 1;\n            this.STEPSTATE = 2;\n            this.STOPSTATE = 3;\n            this.executionState = this.STOPSTATE;\n            this.goNext = false;\n            this.initRun = function(animate) {\n                var ter = vplIdeInstance.getTerminal();\n                if (ter.isConnected()) {\n                    ter.closeLocal();\n                }\n                this.animateRun = animate;\n                Blockly.JavaScript.STATEMENT_PREFIX = 'highlightBlock(%1);\\n';\n                Blockly.JavaScript.addReservedWords('highlightBlock');\n                var code = Blockly.JavaScript.workspaceToCode(self.workspaceInstance);\n                var initApi = function(interpreter, scope) {\n                    // Add an API function for the alert() block.\n                    var wrapperAlert = function(text) {\n                        text = typeof text != 'string' ? text.toString() + '\\r\\n' : text + '\\r\\n';\n                        return interpreter.createPrimitive(ter.writeLocal(text));\n                    };\n                    interpreter.setProperty(scope, 'alert',\n                            interpreter.createNativeFunction(wrapperAlert));\n\n                    // Add an API function for the prompt() block.\n                    var wrapperPrompt = function(text, callback) {\n                        text = typeof text != 'string' ? text.toString() : '' + text;\n                        ter.writeLocal(text);\n                        ter.setDataCallback(function(t) {\n                                               ter.writeLocal('\\n');\n                                               callback(t);\n                                            });\n                    };\n                    interpreter.setProperty(scope, 'prompt',\n                        interpreter.createAsyncFunction(wrapperPrompt));\n\n                    var wrapperHighlightBlock = function(id) {\n                        if (id == self.getBreakpoint()) {\n                            self.executionState = self.STEPSTATE;\n                            self.updateRunButtons();\n                            vplIdeInstance.getTerminal().setMessage(VPLUtil.str('breakpoint'));\n                        }\n                        if (self.animateRun || self.executionState == self.STEPSTATE) {\n                            self.workspaceInstance.highlightBlock(id);\n                        }\n                        self.goNext = false;\n                    };\n                    interpreter.setProperty(scope, 'highlightBlock',\n                            interpreter.createNativeFunction(wrapperHighlightBlock));\n                };\n                self.interpreter = new Interpreter(code, initApi);\n                ter.connectLocal(self.stop, VPLUtil.doNothing);\n            };\n            this.reservedWords = {\n                'Infinity': true, 'Array': true, 'Boolean': true,\n                'Date': true, 'Error': true, 'EvalError': true,\n                'Function': true, 'JSON': true, 'Math': true,\n                'NaN': true, 'Number': true, 'Object': true, 'RangeError': true,\n                'ReferenceError': true, 'RegExp': true, 'String': true,\n                'SyntaxError': true, 'TypeError': true, 'URIError': true,\n                'alert': true, 'arguments': true, 'constructor': true, 'eval': true,\n                'highlightBlock': true, 'isFinite': true,\n                'isNaN': true, 'parseFloat': true, 'parseInt': true, 'prompt': true,\n                'self': true, 'this': true, 'window': true,\n            };\n            (function() {\n                var breakpoint = null;\n                var lastSelection = null;\n                self.getBreakpoint = function() {\n                    return breakpoint;\n                };\n                self.setBreakpoint = function() {\n                    breakpoint = lastSelection;\n                };\n                self.removeBreakpoint = function() {\n                    breakpoint = null;\n                };\n                self.setLastSelection = function(selection) {\n                    lastSelection = selection;\n                };\n                self.isSelectingBreakpoint = function() {\n                    return breakpoint === null && lastSelection !== null;\n                };\n            })();\n            this.getVarValue = function(val) {\n                var HTML = '';\n                if (val === null) {\n                    HTML = \"<b>null</b>\";\n                } else if (val != undefined) {\n                    var type = typeof val;\n                    if (type == 'string') {\n                        HTML = '\"' + VPLUtil.sanitizeText(val) + '\"';\n                    } else if (type == 'boolean') {\n                        HTML = \"<b>\" + val + \"</b>\";\n                    } else if (type == 'object' && val.class === \"Array\") {\n                        HTML = '[';\n                        var ar = val.properties;\n                        for (var i = 0; i < ar.length; i++) {\n                            HTML += self.getVarValue(ar[i]);\n                            if (i != ar.length - 1) {\n                                HTML += ', ';\n                            }\n                        }\n                        HTML += ']';\n                    } else if (type == 'object') {\n                        HTML = \"<b>\" + val.toString() + \"</b>\";\n                    } else {\n                        HTML += '' + val;\n                    }\n                }\n                return HTML;\n            };\n            this.getVariables = function(properties) {\n                var HTML = '';\n                for (var proname in properties) {\n                    if (this.reservedWords[proname] === true) {\n                        continue;\n                    }\n                    var pro = properties[proname];\n                    if (pro != undefined && !(pro.class === \"Function\")) {\n                        var value = VPLUtil.sanitizeText(self.getVarValue(pro));\n                        HTML += '<b>' + proname + \"</b>:&nbsp;\" + value + \"<br>\\n\";\n                    }\n                }\n                return HTML;\n            };\n            this.getParameters = function(args) {\n                var HTML = '(';\n                for (var i = 0; i < args.length; i++) {\n                    HTML += '' + args[i];\n                    if (i < args.length - 1) {\n                        HTML += ', ';\n                    }\n                }\n                return HTML + ')';\n            };\n            this.showStack = function(interpreter) {\n                var sn = 0;\n                var HTML = '<table class=\"generaltable\">';\n                var stack = interpreter.stateStack;\n                var lastFunc = '<tr><td>0</td><td><b>Globals</b></td>';\n                for (var i = 0; i < stack.length; i++) {\n                    var level = stack[i];\n                    if (lastFunc > '' && (level.node.type == 'CallExpression' || i == stack.length - 1)) {\n                        HTML += lastFunc + '<td>' + self.getVariables(level.scope.properties);\n                        HTML += '</td></tr>';\n                    }\n                    if (level.node.type == 'CallExpression') {\n                        if (self.reservedWords[level.node.callee.name] !== true\n                        && level.node.callee.name != undefined) {\n                            sn++;\n                            lastFunc = '<tr><td>' + sn + '</td>';\n                            lastFunc += '<td>' + level.node.callee.name + self.getParameters(level.arguments_) + '</td>';\n                        } else {\n                            lastFunc = '';\n                        }\n                    }\n                }\n                HTML += '</table>';\n                vplIdeInstance.setResult({variables: HTML});\n            };\n            this.runLoop = function() {\n                if (!self.interpreter) {\n                    return;\n                }\n                self.goNext = true;\n                for (var i = 0; i < 30000 && self.goNext; i++) {\n                    if (self.executionState == self.STOPSTATE) {\n                        break;\n                    }\n                    if (!self.interpreter || !self.interpreter.step()) {\n                        self.executionState = self.STOPSTATE;\n                        self.updateRunButtons();\n                        break;\n                    }\n                }\n                if (self.executionState == self.STOPSTATE) {\n                    self.workspaceInstance.highlightBlock(-1);\n                    vplIdeInstance.getTerminal().closeLocal();\n                    vplIdeInstance.setResult({variables: ''});\n                    return;\n                }\n                if (self.executionState == self.RUNSTATE) {\n                    if (self.animateRun) {\n                        setTimeout(self.runLoop, 1000);\n                        self.showStack(self.interpreter);\n                    } else {\n                        setTimeout(self.runLoop, 0);\n                    }\n                } else {\n                    self.showStack(self.interpreter);\n                }\n            };\n            this.start = function() {\n                if (self.executionState != self.STOPSTATE) {\n                    return;\n                }\n                self.initRun(false);\n                self.executionState = self.RUNSTATE;\n                self.updateRunButtons();\n                vplIdeInstance.getTerminal().setMessage(VPLUtil.str('start'));\n                self.runLoop();\n            };\n            this.startAnimate = function() {\n                if (self.executionState != self.STOPSTATE) {\n                    return;\n                }\n                self.initRun(true);\n                self.executionState = self.RUNSTATE;\n                self.updateRunButtons();\n                vplIdeInstance.getTerminal().setMessage(VPLUtil.str('startanimate'));\n                self.runLoop();\n            };\n            this.stop = function() {\n                self.executionState = self.STOPSTATE;\n                self.workspaceInstance.highlightBlock(-1);\n                self.updateRunButtons();\n                vplIdeInstance.getTerminal().setMessage(VPLUtil.str('stop'));\n                vplIdeInstance.getTerminal().closeLocal();\n                self.interpreter = false;\n                vplIdeInstance.setResult({variables: ''});\n            };\n            this.pause = function() {\n                if (self.executionState != self.RUNSTATE) {\n                    return;\n                }\n                self.executionState = self.STEPSTATE;\n                vplIdeInstance.getTerminal().setMessage(VPLUtil.str('pause'));\n                self.updateRunButtons();\n            };\n            this.resume = function() {\n                if (self.executionState != self.STEPSTATE) {\n                    return;\n                }\n                self.executionState = self.RUNSTATE;\n                vplIdeInstance.getTerminal().setMessage(VPLUtil.str('resume'));\n                self.updateRunButtons();\n                self.runLoop();\n            };\n            this.step = function() {\n                if (self.executionState == self.STOPSTATE) {\n                    self.initRun(true);\n                }\n                self.executionState = self.STEPSTATE;\n                self.updateRunButtons();\n                vplIdeInstance.getTerminal().setMessage(VPLUtil.str('step'));\n                self.runLoop();\n            };\n            this.hasUndo = function() {\n                return true;\n            };\n            this.hasRedo = function() {\n                return true;\n            };\n            this.oldSetFileName = this.setFileName;\n            this.generatorMap = {\n                py: 'Python',\n                dart: 'Dart',\n                js: 'JavaScript',\n                lua: 'Lua',\n                php: 'PHP'\n            };\n            this.generator = '';\n            this.setFileName = function(newName) {\n                var oldFileName = this.getFileName();\n                var oldExt = VPLUtil.fileExtension(oldFileName);\n                if (!self.oldSetFileName(newName)) {\n                    VPLUtil.log(\"Blockly setFileName: name no acepted \" + newName);\n                    return false;\n                }\n                VPLUtil.log('Blockly set filename ' + newName);\n                var regExt2 = /\\.([^.]+)\\.blockly[123]?$/;\n                var regFn2 = /(.+)\\.blockly[123]?$/;\n                var ext2 = regExt2.exec(newName);\n                var fn2 = regFn2.exec(newName);\n                if (ext2 !== null && fn2 !== null && typeof this.generatorMap[ext2[1]] == 'string') {\n                    this.generator = this.generatorMap[ext2[1]];\n                    this.generatedFilename = fn2[1];\n                    VPLUtil.log('Blockly generator ' + this.generator + ' for filename ' + this.generatedFilename);\n                    this.updateGeneratedCode();\n                } else {\n                    this.generator = '';\n                }\n                if (oldExt != VPLUtil.fileExtension(newName)) {\n                    VPLUtil.log('Blockly extension changed');\n                    VPLUtil.afterAll('reopenBlockly', function() {\n                            VPLUtil.log('reopenBlockly');\n                            self.close();\n                            self.open();\n                        }\n                    );\n                }\n                return true;\n            };\n            this.updateGeneratedCode = function() {\n                if (self.blocklyNotLoaded) {\n                    return;\n                }\n                var fileManager = self.getFileManager();\n                if (self.generator != '') {\n                    VPLUtil.log('Blockly generate ' + self.generator);\n                    var fid = fileManager.fileNameExists(self.generatedFilename);\n                    // Try to create generated code file.\n                    if (fid == -1) {\n                        VPLUtil.log(\"try to create \" + self.generatedFilename + \" files\");\n                        fileManager.addFile({\n                            name: self.generatedFilename,\n                            contents: ''},\n                            false, VPLUtil.doNothing, VPLUtil.doNothing);\n                        fid = fileManager.fileNameExists(self.generatedFilename);\n                    }\n                    if (fid != -1) {\n                        var code = Blockly[self.generator].workspaceToCode(self.workspaceInstance);\n                        var fileGenerated = fileManager.getFile(fid);\n                        if (fileGenerated.getContent() != code) {\n                            fileGenerated.setContent(code);\n                            fileGenerated.change();\n                            fileGenerated.gotoLine(1);\n                            fileGenerated.setReadOnly(true);\n                        }\n                    }\n                }\n            };\n            this.changeCode = function(event) {\n                VPLUtil.log(event);\n                if (event.type == 'ui' && event.element == 'selected') {\n                    self.setLastSelection(event.newValue);\n                    return;\n                }\n                if (event.type == 'ui'\n                        && event.element == 'category'\n                        && event.newValue == VPLUtil.str('run')) {\n                        VPLUtil.longDelay('updateRunButtons', self.updateRunButtons);\n                    return;\n                }\n                if (self.firstContent) {\n                    if (event.type == 'finished_loading') {\n                        self.firstContent = false;\n                        self.workspaceInstance.clearUndo();\n                    } else {\n                        return;\n                    }\n                }\n                if (!event.recordUndo) {\n                    return;\n                }\n\n                VPLUtil.log('Call change due changeCode');\n                self.change();\n                if (self.generator != '') {\n                    VPLUtil.afterAll('generate' + self.getFileName(), self.updateGeneratedCode);\n                }\n            };\n            var triesUpdateRunButtons = 0;\n            var triesUpdateRunButtonsLimits = 20;\n            this.updateRunButtons = function() {\n                if ($('.blocklySelectBreakpointC').length == 0) {\n                    triesUpdateRunButtons++;\n                    if (triesUpdateRunButtons > triesUpdateRunButtonsLimits) {\n                        triesUpdateRunButtons = 0;\n                        VPLUtil.log('Giving up to tries of updateRunButtons');\n                        return;\n                    }\n                    VPLUtil.longDelay('updateRunButtons', self.updateRunButtons);\n                    return;\n                }\n                VPLUtil.log('updateRunButtons');\n                triesUpdateRunButtons = 0;\n                var dimmed = 'vpl_dimmed';\n                if (self.isSelectingBreakpoint()) {\n                    $('.blocklySelectBreakpointC').removeClass(dimmed);\n                } else {\n                    $('.blocklySelectBreakpointC').addClass(dimmed);\n                }\n                if (self.getBreakpoint() === null) {\n                    $('.blocklyRemoveBreakpointC').addClass(dimmed);\n                } else {\n                    $('.blocklyRemoveBreakpointC').removeClass(dimmed);\n                }\n                switch (self.executionState) {\n                    case self.RUNSTATE: {\n                        $('.blocklyStartC').addClass(dimmed);\n                        $('.blocklyStartAnimateC').addClass(dimmed);\n                        $('.blocklyStopC').removeClass(dimmed);\n                        $('.blocklyPauseC').removeClass(dimmed);\n                        $('.blocklyResumeC').addClass(dimmed);\n                        $('.blocklyStepC').addClass(dimmed);\n                        break;\n                    }\n                    case self.STEPSTATE: {\n                        $('.blocklyStartC').addClass(dimmed);\n                        $('.blocklyStartAnimateC').addClass(dimmed);\n                        $('.blocklyStopC').removeClass(dimmed);\n                        $('.blocklyPauseC').addClass(dimmed);\n                        $('.blocklyResumeC').removeClass(dimmed);\n                        $('.blocklyStepC').removeClass(dimmed);\n                        break;\n                    }\n                    case self.STOPSTATE: {\n                        $('.blocklyStartC').removeClass(dimmed);\n                        $('.blocklyStartAnimateC').removeClass(dimmed);\n                        $('.blocklyStopC').addClass(dimmed);\n                        $('.blocklyPauseC').addClass(dimmed);\n                        $('.blocklyResumeC').addClass(dimmed);\n                        $('.blocklyStepC').removeClass(dimmed);\n                        break;\n                    }\n                }\n            };\n            this.setToolbox = function() {\n                var ext = VPLUtil.fileExtension(this.getFileName());\n                var toolboxname = ext + 'Toolbox';\n                if (self[toolboxname] === false) {\n                    $.ajax({\n                        url: '../editor/blocklytoolboxes/' + toolboxname + '.xml',\n                        dataType: 'text',\n                        success: function(data) {\n                            self[toolboxname] = self.blocklyIn18(data);\n                            self.setToolbox();\n                        },\n                    });\n                    return;\n                }\n                var addUpdateButtons = function(func) {\n                    return function() {\n                        func();\n                        self.updateRunButtons();\n                    };\n                };\n                var callBacks = {\n                    'blocklyStartButton': this.start,\n                    'blocklyStartAnimateButton': this.startAnimate,\n                    'blocklyStopButton': this.stop,\n                    'blocklyPauseButton': this.pause,\n                    'blocklyResumeButton': this.resume,\n                    'blocklyStepButton': this.step,\n                    'blocklySelectBreakpointButton': this.setBreakpoint,\n                    'blocklyRemoveBreakpointButton': this.removeBreakpoint,\n                };\n                var wp = this.workspaceInstance;\n                wp.updateToolbox(this[toolboxname]);\n                for (var key in callBacks) {\n                    wp.registerButtonCallback(key, addUpdateButtons(callBacks[key]));\n                }\n                this.adjustSize();\n            };\n            this.open = function() {\n                this.showFileName();\n                if (self.blocklyNotLoaded) {\n                    VPLUtil.loadScript(\n                        [\n                            '/blockly/blockly_compressed.js',\n                            '/blockly/msg/js/en.js',\n                            '/blockly/blocks_compressed.js',\n                            '/blockly/python_compressed.js',\n                            '/blockly/javascript_compressed.js',\n                            '/blockly/php_compressed.js',\n                            '/blockly/lua_compressed.js',\n                            '/blockly/dart_compressed.js',\n                            '/acorn/acorn.js',\n                            '/acorn/interpreter.js',\n                        ],\n                        function() {\n                            VPLUtil.log('Blocklyloaded', true);\n                            adaptBlockly();\n                            self.blocklyNotLoaded = false;\n                            self.open();\n                        }\n                    );\n                    return false;\n                }\n                var code = this.getContent();\n                this.setOpen(true);\n                var fileName = this.getFileName();\n                var horizontalMenu = false;\n                if (/.*[0-9]$/.test(VPLUtil.fileExtension(fileName))) {\n                    horizontalMenu = true;\n                }\n                var tid = this.getTId();\n                // Workaround to remove jquery-ui theme background color.\n                $(tid).removeClass('ui-widget-content ui-tabs-panel');\n                $(tid).addClass('ui-corner-bottom');\n                this.bdiv = 'bkdiv' + this.getId();\n                $(tid).html('<div id=\"' + this.bdiv + '\" style=\"height: 480px; width: 600px;\"></div>');\n                var options = {\n                    toolbox: '<xml><category name=\"\" colour=\"330\"><block type=\"math_number\"></block></category></xml>',\n                    media: '../editor/blockly/media/',\n                    horizontalLayout: horizontalMenu,\n                    zoom: {\n                        controls: true,\n                        wheel: true,\n                        startScale: 1.0,\n                        maxScale: 3,\n                        minScale: 0.2,\n                        scaleSpeed: 1.05\n                    }\n                };\n                this.workspaceInstance = Blockly.inject(this.bdiv, options);\n                this.setToolbox();\n                this.firstContent = code > '';\n                self.workspaceInstance.addChangeListener(self.changeCode);\n                this.setContent(code);\n                VPLUtil.adjustBlockly(self.workspaceInstance, 10, 10);\n                self.workspaceInstance.scrollX = 0;\n                self.workspaceInstance.scrollY = 0;\n                Blockly.svgResize(self.workspaceInstance);\n                Blockly.resizeSvgContents(self.workspaceInstance);\n                self.setFileName(self.getFileName());\n                self.adjustSize();\n                // Must return false. Do not change it.\n                return false;\n            };\n            var getContentOld = this.getContent;\n            this.getContent = function() {\n                if (!this.isOpen()) {\n                    return getContentOld.call(this);\n                }\n                var xml = Blockly.Xml.workspaceToDom(this.workspaceInstance);\n                var xmlText = Blockly.Xml.domToPrettyText(xml);\n                return xmlText;\n            };\n            var setContentOld = this.setContent;\n            this.setContent = function(c) {\n                setContentOld.call(this, c);\n                if (c.length > 0 && this.isOpen()) {\n                    this.workspaceInstance.clear();\n                    var xml = Blockly.Xml.textToDom(c);\n                    Blockly.Xml.domToWorkspace(xml, this.workspaceInstance);\n                }\n            };\n            this.close = function() {\n                if (this.isOpen()) {\n                    setContentOld.call(this, this.getContent());\n                    this.workspaceInstance.dispose();\n                    this.workspaceInstance = false;\n                    this.setOpen(false);\n                }\n            };\n            this.blocklyNotLoaded = true;\n            this.blocklyToolbox = false;\n            this.blockly0Toolbox = false;\n            this.blockly1Toolbox = false;\n            this.blockly2Toolbox = false;\n            this.blockly3Toolbox = false;\n            this.blocklyStrs = [\n                'basic',\n                'intermediate',\n                'advanced',\n                'variables',\n                'operatorsvalues',\n                'control',\n                'inputoutput',\n                'functions',\n                'lists',\n                'math',\n                'text',\n                'run',\n                'start',\n                'startanimate',\n                'stop',\n                'pause',\n                'resume',\n                'step',\n                'breakpoint',\n                'selectbreakpoint',\n                'removebreakpoint'\n            ];\n            this.blocklyIn18 = function(data) {\n                var l = this.blocklyStrs.length;\n                for (var i = 0; i < l; i++) {\n                    var str = this.blocklyStrs[i];\n                    var reg = new RegExp('\\\\[\\\\[' + str + '\\\\]\\\\]', 'g');\n                    var rep = VPLUtil.str(str);\n                    data = data.replace(reg, rep);\n                }\n                return data;\n            };\n            this.langSelection = function() {\n                this.setLang('Blockly');\n            };\n        };\n    }\n);\n"],"names":["define","$","VPLUtil","self","this","vplIdeInstance","getVPLIDE","firstContent","workspaceInstance","breakpoint","lastSelection","oldAdjustSize","adjustSize","call","editTag","getTId","length","newHeight","parent","height","position","top","bdiv","width","Blockly","svgResize","undo","isOpen","redo","interpreter","animateRun","RUNSTATE","STEPSTATE","STOPSTATE","executionState","goNext","initRun","animate","ter","getTerminal","isConnected","closeLocal","JavaScript","STATEMENT_PREFIX","addReservedWords","code","workspaceToCode","Interpreter","scope","setProperty","createNativeFunction","text","toString","createPrimitive","writeLocal","createAsyncFunction","callback","setDataCallback","t","id","getBreakpoint","updateRunButtons","setMessage","str","highlightBlock","connectLocal","stop","doNothing","reservedWords","setBreakpoint","removeBreakpoint","setLastSelection","selection","isSelectingBreakpoint","getVarValue","val","HTML","undefined","type","sanitizeText","class","ar","properties","i","getVariables","proname","pro","getParameters","args","showStack","sn","stack","stateStack","lastFunc","level","node","callee","name","arguments_","setResult","variables","runLoop","step","setTimeout","start","startAnimate","pause","resume","hasUndo","hasRedo","oldSetFileName","setFileName","generatorMap","py","dart","js","lua","php","generator","newName","oldFileName","getFileName","oldExt","fileExtension","log","ext2","exec","fn2","generatedFilename","updateGeneratedCode","afterAll","close","open","blocklyNotLoaded","fileManager","getFileManager","fid","fileNameExists","addFile","contents","fileGenerated","getFile","getContent","setContent","change","gotoLine","setReadOnly","changeCode","event","element","newValue","clearUndo","recordUndo","longDelay","triesUpdateRunButtons","dimmed","removeClass","addClass","setToolbox","toolboxname","addUpdateButtons","func","callBacks","wp","key","updateToolbox","registerButtonCallback","ajax","url","dataType","success","data","blocklyIn18","showFileName","loadScript","PHP","workspaceToCodeOld","workspace","Python","setOpen","fileName","horizontalMenu","test","tid","getId","html","options","toolbox","media","horizontalLayout","zoom","controls","wheel","startScale","maxScale","minScale","scaleSpeed","inject","addChangeListener","adjustBlockly","scrollX","scrollY","resizeSvgContents","getContentOld","xml","Xml","workspaceToDom","domToPrettyText","setContentOld","c","clear","textToDom","domToWorkspace","dispose","blocklyToolbox","blockly0Toolbox","blockly1Toolbox","blockly2Toolbox","blockly3Toolbox","blocklyStrs","l","reg","RegExp","rep","replace","langSelection","setLang"],"mappings":"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"}