{"version":3,"file":"jstests-lazy.min.js","sources":["../src/jstests-lazy.js"],"sourcesContent":["// This file is part of VPL for Moodle - http://vpl.dis.ulpgc.es/\n//\n// VPL for Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// VPL for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with VPL for Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * VPL JavaScript test\n *\n * @copyright 2017 Juan Carlos Rodríguez-del-Pino\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author Juan Carlos Rodríguez-del-Pino <jcrodriguez@dis.ulpgc.es>\n */\n\ndefine(\n    [\n        'jquery',\n        'mod_vpl/vplutil',\n    ],\n    function($, VPLUtil) {\n        var tests = [];\n        var result = [];\n        var testing = '';\n        var nAsserts = 0;\n        /**\n         * Show results of tests in page and window.console\n         */\n        function showResults() {\n            var stat = nAsserts + \" asserts tested\";\n            window.console.log(stat);\n            $('#test_results').append($('<p></p>').text(stat));\n            var message;\n            if (result.length == 0) {\n                message = 'Test passed';\n            } else {\n                message = result.length + ' errors found';\n            }\n            window.console.log(message);\n            $('#test_results').append($('<p></p>').text(message));\n            if (result.length > 0) {\n                var list = $('<ol></ol>');\n                for (var i = 0; i < result.length; i++) {\n                    window.console.log((i + 1) + ': ' + result[i]);\n                    var element = $('<li></li>');\n                    element.text(result[i]);\n                    list.append(element);\n                }\n                $('#test_results').append(list);\n            }\n        }\n        /**\n         * Basic test assert\n         * @param {boolean} b test result\n         * @param {string} message Optional message\n         */\n        function assert(b, message) {\n            nAsserts++;\n            if (!b) {\n                if (typeof message == 'string') {\n                    result.push(\"Error: \" + message + \" testing \" + testing);\n                }\n            }\n        }\n        /**\n         * Basic test assert\n         * @param {boolean} a Expected\n         * @param {boolean} b Actual\n         * @param {string} message Optional message\n         */\n        function assertEquals(a, b, message) {\n            nAsserts++;\n            if (a != b) {\n                if (typeof message == 'string') {\n                    result.push(\"Error: \" + message + \" testing \" + testing + '. Expected \"' + a + '\" found \"' + b + '\"');\n                }\n            }\n        }\n        /**\n         * Run tests in tests array\n         */\n        function runTests() {\n            for (var i = 0; i < tests.length; i++) {\n                try {\n                    testing = tests[i].name;\n                    tests[i].test();\n                } catch (e) {\n                    result.push(\"Error: Exception \" + e.message + \" testing \" + testing + \"\\n\" + e.stack);\n                }\n            }\n        }\n        tests.push({\n            'name': \"VPLUtil\",\n            'test': function() {\n                assert(VPLUtil.returnTrue(), 'returnTrue');\n                assert(!VPLUtil.returnFalse(), 'returnFalse');\n                (function() {\n                    var rawData = new ArrayBuffer(13);\n                    assertEquals(13, rawData.byteLength, 'rawData.byteLength');\n                    var bufferData = new Uint8Array(rawData);\n                    for (var i = 0; i < bufferData.length; i++) {\n                        bufferData[i] = Math.round(Math.random() * 255);\n                    }\n                    assertEquals(13, bufferData.length, 'bufferData.length');\n                    var stringData = \"abcdeñhfjéÇ123143565387095609784\";\n                    var rawResult = VPLUtil.String2ArrayBuffer(stringData);\n                    var stringResult = VPLUtil.ArrayBuffer2String(rawResult);\n                    assertEquals(stringData, stringResult, 'ArrayBuffer2String');\n                    stringResult = VPLUtil.ArrayBuffer2String(rawData);\n                    rawResult = VPLUtil.String2ArrayBuffer(stringResult);\n                    var bufferResult = new Uint8Array(rawResult);\n                    assertEquals(bufferData.length, bufferResult.length, 'String2ArrayBuffer');\n                    if (bufferData.length == bufferResult.length) {\n                        for (var j = 0; j < bufferData.length; j++) {\n                            assertEquals(bufferData[j], bufferResult[j], 'String2ArrayBuffer values');\n                        }\n                    }\n                })();\n                (function() {\n                    assertEquals('c', VPLUtil.fileExtension('a.c'), 'fileExtension');\n                    assertEquals('C', VPLUtil.fileExtension('a.c.C'), 'fileExtension');\n                    assertEquals('hxx', VPLUtil.fileExtension('a.hxx'), 'fileExtension');\n                    assertEquals('all', VPLUtil.fileExtension('.all'), 'fileExtension');\n                })();\n                (function() {\n                    assert(!VPLUtil.isImage('a.c'), 'isImage');\n                })();\n                (function() {\n                    assert(!VPLUtil.isBinary('a.c'), 'isBinary');\n                })();\n                (function() {\n                    assert(!VPLUtil.isBlockly('a.c'), 'isBlockly');\n                })();\n                (function() {\n                    assert(VPLUtil.validFileName('a.c'), 'validFileName');\n                })();\n            }\n        });\n        tests.push({\n            'name': \"VPLUtil langType\",\n            'test': function() {\n                var mapnames = VPLUtil.getLangNames();\n                for (var ext in mapnames) {\n                    assert(VPLUtil.langType(ext) != 'plain_text', 'VPLUtil.langType');\n                }\n                assert(VPLUtil.langType('otra cosa') == 'plain_text', 'VPLUtil.langType');\n            }\n        });\n        runTests();\n        return {\n            start: function() {\n                $(showResults);\n            }\n        };\n    }\n);\n"],"names":["define","$","VPLUtil","tests","result","testing","nAsserts","showResults","message","stat","window","console","log","append","text","length","list","i","element","assert","b","push","assertEquals","a","returnTrue","returnFalse","rawData","ArrayBuffer","byteLength","bufferData","Uint8Array","Math","round","random","stringData","rawResult","String2ArrayBuffer","stringResult","ArrayBuffer2String","bufferResult","j","fileExtension","isImage","isBinary","isBlockly","validFileName","mapnames","getLangNames","ext","langType","name","test","e","stack","runTests","start"],"mappings":";;;;;;;AAuBAA,8BACI,CACI,SACA,oBAEJ,SAASC,EAAGC,aACJC,MAAQ,GACRC,OAAS,GACTC,QAAU,GACVC,SAAW,WAINC,kBAIDC,QAHAC,KAAOH,SAAW,qBACtBI,OAAOC,QAAQC,IAAIH,MACnBR,EAAE,iBAAiBY,OAAOZ,EAAE,WAAWa,KAAKL,OAGxCD,QADiB,GAAjBJ,OAAOW,OACG,cAEAX,OAAOW,OAAS,gBAE9BL,OAAOC,QAAQC,IAAIJ,SACnBP,EAAE,iBAAiBY,OAAOZ,EAAE,WAAWa,KAAKN,UACxCJ,OAAOW,OAAS,EAAG,SACfC,KAAOf,EAAE,aACJgB,EAAI,EAAGA,EAAIb,OAAOW,OAAQE,IAAK,CACpCP,OAAOC,QAAQC,IAAKK,EAAI,EAAK,KAAOb,OAAOa,QACvCC,QAAUjB,EAAE,aAChBiB,QAAQJ,KAAKV,OAAOa,IACpBD,KAAKH,OAAOK,SAEhBjB,EAAE,iBAAiBY,OAAOG,gBAQzBG,OAAOC,EAAGZ,SACfF,WACKc,GACqB,iBAAXZ,SACPJ,OAAOiB,KAAK,UAAYb,QAAU,YAAcH,kBAUnDiB,aAAaC,EAAGH,EAAGZ,SACxBF,WACIiB,GAAKH,GACiB,iBAAXZ,SACPJ,OAAOiB,KAAK,UAAYb,QAAU,YAAcH,QAAU,eAAiBkB,EAAI,YAAcH,EAAI,YAiB7GjB,MAAMkB,KAAK,MACC,eACA,WACJF,OAAOjB,QAAQsB,aAAc,cAC7BL,QAAQjB,QAAQuB,cAAe,8BAEvBC,QAAU,IAAIC,YAAY,IAC9BL,aAAa,GAAII,QAAQE,WAAY,8BACjCC,WAAa,IAAIC,WAAWJ,SACvBT,EAAI,EAAGA,EAAIY,WAAWd,OAAQE,IACnCY,WAAWZ,GAAKc,KAAKC,MAAsB,IAAhBD,KAAKE,UAEpCX,aAAa,GAAIO,WAAWd,OAAQ,yBAChCmB,WAAa,mCACbC,UAAYjC,QAAQkC,mBAAmBF,YACvCG,aAAenC,QAAQoC,mBAAmBH,WAC9Cb,aAAaY,WAAYG,aAAc,sBACvCA,aAAenC,QAAQoC,mBAAmBZ,SAC1CS,UAAYjC,QAAQkC,mBAAmBC,kBACnCE,aAAe,IAAIT,WAAWK,cAClCb,aAAaO,WAAWd,OAAQwB,aAAaxB,OAAQ,sBACjDc,WAAWd,QAAUwB,aAAaxB,WAC7B,IAAIyB,EAAI,EAAGA,EAAIX,WAAWd,OAAQyB,IACnClB,aAAaO,WAAWW,GAAID,aAAaC,GAAI,gCAKrDlB,aAAa,IAAKpB,QAAQuC,cAAc,OAAQ,iBAChDnB,aAAa,IAAKpB,QAAQuC,cAAc,SAAU,iBAClDnB,aAAa,MAAOpB,QAAQuC,cAAc,SAAU,iBACpDnB,aAAa,MAAOpB,QAAQuC,cAAc,QAAS,iBAGnDtB,QAAQjB,QAAQwC,QAAQ,OAAQ,WAGhCvB,QAAQjB,QAAQyC,SAAS,OAAQ,YAGjCxB,QAAQjB,QAAQ0C,UAAU,OAAQ,aAGlCzB,OAAOjB,QAAQ2C,cAAc,OAAQ,oBAIjD1C,MAAMkB,KAAK,MACC,wBACA,eACAyB,SAAW5C,QAAQ6C,mBAClB,IAAIC,OAAOF,SACZ3B,OAAgC,cAAzBjB,QAAQ+C,SAASD,KAAsB,oBAElD7B,OAAwC,cAAjCjB,QAAQ+C,SAAS,aAA8B,sCA/DrD,IAAIhC,EAAI,EAAGA,EAAId,MAAMY,OAAQE,QAE1BZ,QAAUF,MAAMc,GAAGiC,KACnB/C,MAAMc,GAAGkC,OACX,MAAOC,GACLhD,OAAOiB,KAAK,oBAAsB+B,EAAE5C,QAAU,YAAcH,QAAU,KAAO+C,EAAEC,QA6D3FC,GACO,CACHC,MAAO,WACHtD,EAAEM"}