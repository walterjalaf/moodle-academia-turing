{"version":3,"file":"vplvnc.min.js","sources":["../src/vplvnc.js"],"sourcesContent":["// This file is part of VPL for Moodle - http://vpl.dis.ulpgc.es/\n//\n// VPL for Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// VPL for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with VPL for Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * VNC client control\n *\n * @copyright 2014 Juan Carlos Rodríguez-del-Pino\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author Juan Carlos Rodríguez-del-Pino <jcrodriguez@dis.ulpgc.es>\n */\n\n/* globals RFB */\n/* globals Util */\n\ndefine(\n    [\n        'jquery',\n        'jqueryui',\n        'mod_vpl/vplutil',\n        'mod_vpl/vplui',\n        'mod_vpl/vplclipboard',\n        'core/log'\n    ],\n    function($, jqui, VPLUtil, VPLUI, VPLClipboard, console) {\n        var VPLVNCClient = function(VNCDialogId, str) {\n            window.INCLUDE_URI = VPLUtil.options.scriptPath + \"/noVNC/include/\";\n            if (typeof Util == 'undefined') {\n                VPLUtil.loadScript(['/noVNC/include/util.js'],\n                    function() {\n                        VPLUtil.log('/noVNC/include/util.js loaded', true);\n                        Util.load_scripts([\"webutil.js\", \"base64.js\", \"websock.js\", \"des.js\",\n                        \"keysymdef.js\", \"keyboard.js\", \"input.js\", \"display.js\",\n                        \"jsunzip.js\", \"rfb.js\", \"keysym.js\"]);\n                    }\n                );\n            }\n            var self = this;\n            var rfb;\n            var title = '';\n            var message = '';\n            var lastState = '';\n            var VNCDialog = $('#' + VNCDialogId);\n            var canvas = $('#' + VNCDialogId + \" canvas\");\n            var onCloseAction = VPLUtil.doNothing;\n            var clipboard;\n            var needResize = true;\n            var titleText;\n            var inputarea = window.document.createElement('input');\n            inputarea.style.position = 'absolute';\n            inputarea.style.left = '0px';\n            inputarea.style.top = '-10000px';\n            inputarea.style.width = '1em';\n            inputarea.style.height = '1ex';\n            inputarea.style.opacity = '0';\n            inputarea.style.backgroundColor = 'transparent';\n            inputarea.style.borderStyle = 'none';\n            inputarea.style.outlineStyle = 'none';\n            inputarea.autocapitalize = 'off';\n            inputarea.autocomplete = 'off';\n            inputarea.autocorrect = 'off';\n            inputarea.wrap = 'off';\n            inputarea.spellcheck = 'false';\n            VNCDialog.append(inputarea);\n            /**\n             * Event handler of keyboard button.\n             */\n            function keyboardButton() {\n                if ($(inputarea).is(':focus')) {\n                    inputarea.blur();\n                } else {\n                    inputarea.focus();\n                }\n            }\n            /**\n             * Event handler of paste button at clipboard.\n             */\n            function pasteClipboard() {\n                if (self.isConnected()) {\n                    rfb.clipboardPasteFrom(clipboard.getEntry2());\n                }\n            }\n            /**\n             * Event handler of paste button at clipboard.\n             *\n             * @param {object} rfb vnc client object\n             * @param {string} text Text received\n             */\n            function receiveClipboard(rfb, text) {\n                clipboard.setEntry1(text);\n            }\n            /**\n             * Event handler of clipboard button.\n             */\n            function openClipboard() {\n                clipboard.show();\n            }\n            /**\n             * Inform rfb of focus received.\n             */\n            function getFocus() {\n                if (self.isConnected()) {\n                    rfb.get_keyboard().set_focused(true);\n                }\n            }\n            /**\n             * Inform rfb of focus lost.\n             */\n            function lostFocus() {\n                if (self.isConnected()) {\n                    rfb.get_keyboard().set_focused(false);\n                }\n            }\n            /**\n             * Tries to do a copy.\n             */\n            function copyAction() {\n                clipboard.setEntry1(clipboard.getEntry1());\n                document.execCommand('copy');\n            }\n            var HTMLUpdateClipboard = VPLUI.genIcon('copy', 'sw') + ' ' + str('copy');\n            var HTMLPaste = VPLUI.genIcon('paste', 'sw') + ' ' + str('paste');\n            clipboard = new VPLClipboard('vpl_dialog_vnc_clipboard', HTMLUpdateClipboard, copyAction, HTMLPaste, pasteClipboard,\n                    lostFocus);\n            canvas.on('click', function(e) {\n                if (e.target == canvas[0]) {\n                    getFocus();\n                } else {\n                    lostFocus();\n                }\n            });\n            this.displayResize = function() { // TODO hot screen resize.\n                if (self.isConnected()) {\n                    var w = VNCDialog.width();\n                    var h = VNCDialog.height();\n                    self.setCanvasSize(w, h);\n                    rfb.get_display().viewportChange(0, 0, w, h);\n                }\n            };\n            /**\n             * Event handler that limit the size of the vnc client windows.\n             *\n             */\n            function controlDialogSize() {\n                // Resize if dialog is large than screen.\n                var bw = $('html').width();\n                var bh = $(window).height();\n                if (VNCDialog.width() > bw) {\n                    needResize = true;\n                    VNCDialog.dialog(\"option\", \"width\", bw);\n                }\n                if (VNCDialog.parent().height() > bh) {\n                    needResize = true;\n                    VNCDialog.dialog(\"option\", \"height\", bh - VNCDialog.prev().outerHeight());\n                }\n            }\n            VNCDialog.dialog({\n                closeOnEscape: false,\n                autoOpen: false,\n                modal: true,\n                width: 'auto',\n                height: 'auto',\n                dialogClass: 'vpl_ide vpl_vnc',\n                create: function() {\n                    titleText = VPLUI.setTitleBar(VNCDialog, 'vnc', 'graphic', ['clipboard', 'keyboard'], [openClipboard,\n                            keyboardButton]);\n                },\n                dragStop: controlDialogSize,\n                focus: getFocus,\n                open: controlDialogSize,\n                beforeClose: function() {\n                    if (needResize) {\n                        var w = VNCDialog.width();\n                        var h = VNCDialog.height();\n                        needResize = false;\n                        self.setCanvasSize(w, h);\n                    }\n                },\n                close: function() {\n                    self.disconnect();\n                },\n                resizeStop: function() {\n                    controlDialogSize();\n                    needResize = true;\n                }\n            });\n            VNCDialog.css(\"padding\", \"1px\");\n            VNCDialog.parent().css('z-index', 2000);\n            this.updateTitle = function() {\n                var text = title;\n                if (message !== '') {\n                    text += ' (' + message + ')';\n                }\n                titleText.text(str('console') + \": \" + text);\n            };\n            this.setTitle = function(t) {\n                title = t;\n                this.updateTitle();\n            };\n            this.setMessage = function(t) {\n                message = t;\n                this.updateTitle();\n            };\n            /**\n             * Event handler to show vnc client state in windows title.\n             *\n             * @param {object} rfb vnc client\n             * @param {string} state Name of the state\n             * @param {string} oldstate Name of the old state. Not used\n             * @param {string} msg State detail message\n             */\n            function updateState(rfb, state, oldstate, msg) {\n                lastState = state;\n                switch (state) {\n                    case \"normal\":\n                        self.setMessage('');\n                        self.setTitle(str('connected'));\n                        break;\n                    case \"disconnect\":\n                    case \"disconnected\":\n                        self.setTitle(str('connection_closed'));\n                        break;\n                    case \"failed\":\n                        self.setTitle(str('connection_fail'));\n                        console.log(\"VNC client: \" + msg);\n                        break;\n                    default:\n                        self.setMessage('');\n                        self.setTitle(str('connecting'));\n                }\n            }\n\n            this.connect = function(secure, host, port, password, path, onClose) {\n                clipboard.setEntry1('');\n                onCloseAction = onClose;\n                self.show();\n                var target = $('#' + VNCDialogId + \" canvas\")[0];\n                if (!rfb) {\n                    rfb = new RFB({\n                        'target': target,\n                        'encrypt': secure,\n                        'repeaterID': '',\n                        'true_color': true,\n                        'local_cursor': true,\n                        'shared': false,\n                        'view_only': false,\n                        'onUpdateState': updateState,\n                        'onPasswordRequired': null,\n                        'onClipboard': receiveClipboard\n                    });\n                    rfb.set_local_cursor(rfb.get_display().get_cursor_uri());\n                }\n                if (!port) {\n                    port = secure ? 443 : 80;\n                }\n                rfb.connect(host, port, password, path);\n            };\n            this.isOpen = function() {\n                return VNCDialog.dialog(\"isOpen\");\n            };\n            this.close = function() {\n                VNCDialog.dialog(\"close\");\n            };\n            this.isConnected = function() {\n                return rfb && lastState != 'disconnected';\n            };\n            this.disconnect = function() {\n                if (rfb) {\n                    rfb.disconnect();\n                }\n                onCloseAction();\n                clipboard.hide();\n            };\n            /**\n             * Round a number to event and not less than 100.\n             *\n             * @param {number} v value to round\n             *\n             * @returns {int}\n             */\n            function round(v) {\n                if (v < 100) {\n                    v = 100;\n                }\n                return Math.floor(v / 2) * 2;\n            }\n            this.getCanvasSize = function() {\n                return canvas.width() + \"x\" + canvas.height();\n            };\n\n            this.setCanvasSize = function(w, h) {\n                canvas.width(round(w));\n                canvas.height(round(h));\n            };\n            this.show = function() {\n                VNCDialog.dialog('open');\n                VNCDialog.width('auto');\n                VNCDialog.height('auto');\n            };\n            self.setCanvasSize($(window).width() - 150, $(window).height() - 150);\n        };\n        return VPLVNCClient;\n    }\n);\n"],"names":["define","$","jqui","VPLUtil","VPLUI","VPLClipboard","console","VNCDialogId","str","window","INCLUDE_URI","options","scriptPath","Util","loadScript","log","load_scripts","rfb","clipboard","titleText","self","this","title","message","lastState","VNCDialog","canvas","onCloseAction","doNothing","needResize","inputarea","document","createElement","keyboardButton","is","blur","focus","receiveClipboard","text","setEntry1","openClipboard","show","getFocus","isConnected","get_keyboard","set_focused","lostFocus","style","position","left","top","width","height","opacity","backgroundColor","borderStyle","outlineStyle","autocapitalize","autocomplete","autocorrect","wrap","spellcheck","append","HTMLUpdateClipboard","genIcon","HTMLPaste","controlDialogSize","bw","bh","dialog","parent","prev","outerHeight","updateState","state","oldstate","msg","setMessage","setTitle","round","v","Math","floor","getEntry1","execCommand","clipboardPasteFrom","getEntry2","on","e","target","displayResize","w","h","setCanvasSize","get_display","viewportChange","closeOnEscape","autoOpen","modal","dialogClass","create","setTitleBar","dragStop","open","beforeClose","close","disconnect","resizeStop","css","updateTitle","t","connect","secure","host","port","password","path","onClose","RFB","set_local_cursor","get_cursor_uri","isOpen","hide","getCanvasSize"],"mappings":"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"}